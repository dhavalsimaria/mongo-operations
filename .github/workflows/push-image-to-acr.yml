name: Build & Push Docker image to ACR

on:
  push:
    branches: [ main ]
#  pull_request:
#    branches: [ main ]

  # Dependency to a forking workflow
  workflow_run:
    workflows: ["Maven Build"]
    type:
      - complete

env:
  REGISTRY_NAME: dhs2112
  CLUSTER_NAME: test-cluster
  CLUSTER_RESOURCE_GROUP: spring-boot-rg
  NAMESPACE: test-ns
  SECRET: test-secret
  APP_NAME: mongo-operations

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@main

    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # Container build and push to a Azure Container Registry (ACR)
    - run: |
        export MINOR_VERSION=$($(echo date +"%y"))$(WEEK=$((10#$(date +"%V")+1)); if [ $(($WEEK%2)) -eq 0 ]; then if [ ${#WEEK} = 1 ]; then echo "0${WEEK}"; else echo $WEEK; fi; else WEEK=$(($WEEK -1)); if [ ${#WEEK} = 1 ]; then echo "0${WEEK}"; else echo $WEEK; fi; fi)
        export MAJOR_VERSION=1
        export ACTUAL_VERSION=$MAJOR_VERSION.$MINOR_VERSION.${{ github.run_number }}
        echo $ACTUAL_VERSION
        docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${ACTUAL_VERSION} .
        docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${ACTUAL_VERSION}
      #working-directory: .
      
    - name: Azure Kubernetes set context
      uses: Azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

      # Create namespace if doesn't exist
    - run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run=client -o json | kubectl apply -f -
    
#    - run: |
#        kubectl create secret docker-registry test-secret --namespace ${{ env.NAMESPACE }} --docker-server=${{ env.REGISTRY_NAME }}.azurecr.io --docker-username=${{ secrets.REGISTRY_USERNAME }} --docker-password=${{ secrets.REGISTRY_PASSWORD }}

    - name: Create image pull secret for ACR
      uses: Azure/k8s-create-secret@v1
      with:
        container-registry-url: ${{ env.REGISTRY_NAME }}.azurecr.io
        container-registry-username: ${{ secrets.REGISTRY_USERNAME }}
        container-registry-password: ${{ secrets.REGISTRY_PASSWORD }}
        secret-name: ${{ env.SECRET }}
        namespace: ${{ env.NAMESPACE }}
        arguments: --force true
        
    # Deploy app to AKS
#    - uses: azure/k8s-deploy@v1
#      with:
#        manifests: |
#          ${{ github.workspace }}/manifests/deployment.yaml
#          ${{ github.workspace }}/manifests/service.yaml
#        images: |
#          ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:${{ github.sha }}
#        imagepullsecrets: |
#          ${{ env.SECRET }}
#        namespace: ${{ env.NAMESPACE }}


#    - name: Deploy to Kubernetes cluster
#      uses: Azure/k8s-deploy@v3.1
#      with:
#        # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
#        namespace: # optional
#        # Path to the manifest files which will be used for deployment.
#        manifests: 
#        # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
#        images: # optional
#        # Name of a docker-registry secret that has already been set up within the cluster. Each of these secret names are added under imagePullSecrets field for the workloads found in the input manifest files
#        imagepullsecrets: # optional
#        # Switch whether to pull the images from the registry before deployment to find out Dockerfile's path in order to add it to the annotations
#        pull-images: # optional, default is true
#        # Deployment strategy to be used. Allowed values are none, canary and blue-green
#        strategy: # optional, default is none
#        # Route based on service, ingress or SMI for blue-green strategy
#        route-method: # optional, default is service
#        # Indicates the buffer time in minutes before the switch is made to the green version (max is 300 min ie. 5hrs)
#        version-switch-buffer: # optional, default is 0
#        # Traffic split method to be used. Allowed values are pod and smi
#        traffic-split-method: # optional, default is pod
#        # Baseline and canary replicas count. Valid value between 0 to 100 (inclusive)
#        baseline-and-canary-replicas: # optional, default is 0
#        # Percentage of traffic redirect to canary deployment
#        percentage: # optional, default is 0
#        # deploy, promote, or reject
#        action: # default is deploy
#        # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
#        force: # optional
#        # Github token
#        token: # default is ${{ github.token }}
#        # Annotate the target namespace
#        annotate-namespace: # optional, default is true
